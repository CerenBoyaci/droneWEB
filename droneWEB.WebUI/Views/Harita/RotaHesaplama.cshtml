@{
    ViewData["Title"] = "Rota Hesaplama";
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}

<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />

<div class="container py-4">

    <h2 class="text-center text-primary mb-4">Markerlar Arası Rota Hesaplama</h2>

    <div class="row justify-content-center">

        <!-- Harita Kartı -->
        <div class="col-12 mb-4">
            <div class="card shadow-sm border-0" style="border-radius:12px; overflow:hidden;">
                <div id="map" style="width:100%; height:600px;"></div>
            </div>
        </div>

        <!-- Marker Seçim Kartı -->
        <div class="col-12 col-md-10 col-lg-8 mb-4">
            <div class="card p-4 shadow-lg" style="border-radius:12px; background-color:#0d1b3d; color:#fff;">
                <div class="card-body">

                    <h4 class="text-center text-info mb-3">Marker Seçerek Rota</h4>

                    <div class="row g-3 mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Başlangıç Marker</label>
                            <select id="baslangicMarker" class="form-select form-select-lg border border-info text-dark"></select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Bitiş Marker</label>
                            <select id="bitisMarker" class="form-select form-select-lg border border-info text-dark"></select>
                        </div>
                    </div>
                    <div class="text-center mb-3">
                        <button class="btn btn-info btn-glow me-2" onclick="rotaHesapla()">Rotayı Göster</button>
                    </div>

                    <hr class="border-light">

                    <h4 class="text-center text-info mb-3">Koordinattan Rota</h4>
                    <div class="row g-3 mb-3">
                        <div class="col-md-3">
                            <input type="number" id="enlemBaslangic" class="form-control form-control-lg border border-info text-dark" placeholder="Başlangıç Enlem" step="0.000001">
                        </div>
                        <div class="col-md-3">
                            <input type="number" id="boylamBaslangic" class="form-control form-control-lg border border-info text-dark" placeholder="Başlangıç Boylam" step="0.000001">
                        </div>
                        <div class="col-md-3">
                            <input type="number" id="enlemBitis" class="form-control form-control-lg border border-info text-dark" placeholder="Bitiş Enlem" step="0.000001">
                        </div>
                        <div class="col-md-3">
                            <input type="number" id="boylamBitis" class="form-control form-control-lg border border-info text-dark" placeholder="Bitiş Boylam" step="0.000001">
                        </div>
                    </div>
                    <div class="text-center">
                        <button class="btn btn-success btn-glow" onclick="rotaKoordinattan()">Rota Hesapla</button>
                    </div>

                    <div id="rotaBilgi" class="mt-3 text-center fw-bold text-warning"></div>

                </div>
            </div>
        </div>

    </div>
</div>

<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>

<script>
    var map = L.map('map').setView([39.9208, 32.8541], 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    var markersLayer = L.layerGroup().addTo(map);
    var routingControl = null;
    var markers = [];

    async function loadMarkers() {
        try {
            const response = await fetch('https://localhost:7130/api/Haritalama/tum-isaretciler');
            const data = await response.json();

            markersLayer.clearLayers();
            markers = data;

            const baslangicSelect = document.getElementById('baslangicMarker');
            const bitisSelect = document.getElementById('bitisMarker');
            baslangicSelect.innerHTML = '';
            bitisSelect.innerHTML = '';

            data.forEach((marker, index) => {
                L.marker([marker.enlem, marker.boylam])
                    .bindPopup(marker.baslik)
                    .addTo(markersLayer);

                const option1 = document.createElement('option');
                option1.value = index;
                option1.text = marker.baslik;
                baslangicSelect.add(option1);

                const option2 = document.createElement('option');
                option2.value = index;
                option2.text = marker.baslik;
                bitisSelect.add(option2);
            });
        } catch (error) {
            console.error(error);
        }
    }

    loadMarkers();

    function rotaHesapla() {
        const baslangicIndex = parseInt(document.getElementById('baslangicMarker').value);
        const bitisIndex = parseInt(document.getElementById('bitisMarker').value);
        if (isNaN(baslangicIndex) || isNaN(bitisIndex)) { alert("Başlangıç ve bitiş marker seçin!"); return; }

        const baslangic = markers[baslangicIndex];
        const bitis = markers[bitisIndex];

        if (routingControl) map.removeControl(routingControl);

        routingControl = L.Routing.control({
            waypoints: [L.latLng(baslangic.enlem, baslangic.boylam), L.latLng(bitis.enlem, bitis.boylam)],
            routeWhileDragging: true,
            showAlternatives: true,
            lineOptions: { styles: [{ color: 'blue', opacity: 0.6, weight: 5 }] },
            createMarker: function() { return null; }
        }).addTo(map);

        routingControl.on('routesfound', function(e) {
            const routes = e.routes;
            if (routes && routes.length > 0) {
                const summary = routes[0].summary;
                document.getElementById('rotaBilgi').innerText =
                    `Mesafe: ${(summary.totalDistance/1000).toFixed(2)} km, Tahmini Süre: ${Math.ceil(summary.totalTime/60)} dk`;
            }
        });
    }

    function rotaKoordinattan() {
        const lat1 = parseFloat(document.getElementById('enlemBaslangic').value);
        const lon1 = parseFloat(document.getElementById('boylamBaslangic').value);
        const lat2 = parseFloat(document.getElementById('enlemBitis').value);
        const lon2 = parseFloat(document.getElementById('boylamBitis').value);

        if (isNaN(lat1) || isNaN(lon1) || isNaN(lat2) || isNaN(lon2)) { alert("Geçerli koordinat girin!"); return; }

        if (routingControl) map.removeControl(routingControl);

        routingControl = L.Routing.control({
            waypoints: [L.latLng(lat1, lon1), L.latLng(lat2, lon2)],
            routeWhileDragging: true,
            showAlternatives: true,
            lineOptions: { styles: [{ color: 'green', opacity: 0.6, weight: 5 }] },
            createMarker: function() { return null; }
        }).addTo(map);

        routingControl.on('routesfound', function(e) {
            const routes = e.routes;
            if (routes && routes.length > 0) {
                const summary = routes[0].summary;
                document.getElementById('rotaBilgi').innerText =
                    `Mesafe: ${(summary.totalDistance/1000).toFixed(2)} km, Tahmini Süre: ${Math.ceil(summary.totalTime/60)} dk`;
            }
        });

        map.setView([lat1, lon1], 13);
    }
</script>

<style>
    .btn-glow {
        transition: all 0.3s ease;
    }

        .btn-glow:hover {
            box-shadow: 0 0 10px #0dcaf0, 0 0 20px #0dcaf0, 0 0 30px #0dcaf0;
            transform: translateY(-2px);
        }

    .form-select:hover {
        border-color: #0dcaf0;
        box-shadow: 0 0 8px rgba(13,202,240,0.5);
    }

    input.form-control:hover {
        border-color: #0dcaf0;
        box-shadow: 0 0 8px rgba(13,202,240,0.5);
    }
</style>
